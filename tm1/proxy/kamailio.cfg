#!KAMAILIO

loadmodule "pv"
loadmodule "xlog"
loadmodule "tm"
loadmodule "tmx"
loadmodule "sl"
loadmodule "siputils"
loadmodule "textops"
loadmodule "rr"

modparam("xlog", "prefix", "[$ci $rm-$cs] ")
modparam("xlog", "prefix_mode", 1)
modparam("sl", "bind_tm", 0)

disable_sctp = yes
force_rport  = yes

request_route {
    xinfo("$rm Call-ID: $ci RURI: $ru\n");

    route(BOILERPLATE);

    $du = "sip:uas";
    
    route(RELAY);
}

route[RELAY]{
    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if ( is_method("INVITE|BYE") ) {
        if ( !t_is_set("branch_route") ) {
            t_on_branch("MANAGE_BRANCH");
        }
    }

    if ( is_method("INVITE") ) {
        if ( !t_is_set("onreply_route") ) {
            t_on_reply("MANAGE_REPLY");
        }

        if ( !t_is_set("failure_route") ) {
            t_on_failure("MANAGE_FAILURE");
        }
    }

    if ( !t_relay() ) {
        sl_reply_error();
    }

    exit;
}


branch_route[MANAGE_BRANCH] {
    xinfo("Branch Route\n");
}


onreply_route[MANAGE_REPLY] {
    xinfo("Reply Route\n");
}


failure_route["MANAGE_FAILURE"] {
    xinfo("Failure Route\n");
}


onreply_route {
    xinfo("'$rs $rr' Reply From $si;\n");
}


route[BOILERPLATE] {
    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    if (!has_totag()) return;

    # sequential request within a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        route(RELAY);
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487 or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404", "Not here");
    exit;
}

